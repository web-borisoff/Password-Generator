import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;

public class Password {
    private static final LinkedList<String> uppers = new LinkedList<>(Arrays.asList("ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("")));
    private static final LinkedList<String> lowers = new LinkedList<>(Arrays.asList("abcdefghijklmnopqrstuvwxyz".split("")));
    private static final LinkedList<String> digits = new LinkedList<>(Arrays.asList("0123456789".split("")));
    private static StringBuilder base;


    public static String makePassword(int len, boolean flagUpper, boolean flagLower, boolean flagDigit) {
        Collections.shuffle(uppers);
        Collections.shuffle(lowers);
        Collections.shuffle(digits);
        makePasswordBase();

        String temp;
        StringBuilder password = new StringBuilder();
        if (flagUpper && flagLower && !flagDigit) {
            temp = String.valueOf(base).replaceAll("[0-9]", "");
            password.append(temp).setLength(len);
        } else if (flagUpper && flagDigit && !flagLower) {
            temp = String.valueOf(base).replaceAll("[a-z]", "");
            password.append(temp).setLength(len);
        } else if (flagLower && flagDigit && !flagUpper) {
            temp = String.valueOf(base).replaceAll("[A-Z]", "");
            password.append(temp).setLength(len);
        } else if (flagUpper && !flagLower && !flagDigit) {
            temp = String.valueOf(base).replaceAll("[a-z]|[0-9]", "");
            password.append(temp).setLength(len);
        } else if (flagLower && !flagUpper && !flagDigit) {
            temp = String.valueOf(base).replaceAll("[A-Z]|[0-9]", "");
            password.append(temp).setLength(len);
        } else if (flagDigit && !flagUpper && !flagLower) {
            temp = String.valueOf(base).replaceAll("[a-z]|[A-Z]", "");
            password.append(temp).setLength(len);
        } else if (flagUpper && flagLower && flagDigit) {
            password.append(base).setLength(len);
        } else return "Password123";
        return String.valueOf(password);
    }

    private static void makePasswordBase() {
        base = new StringBuilder();
        for (int i = 0, j = 0; i < uppers.size(); i++) {
            base.append(uppers.get(i)).append(lowers.get(i));
            if (i % 3 == 0) {
                base.append(digits.get(j));
                j++;
            }
        }
        base.append(digits.get(9));
    }
}
